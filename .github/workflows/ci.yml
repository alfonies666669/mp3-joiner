name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: Run tests (pytest)
    runs-on: ubuntu-latest

    env:
      PYTHONUTF8: "1"
      SECRET_KEY: "ci-secret"
      ALLOWED_ORIGIN: "http://localhost"
      API_TOKENS_REQUIRED: "false"   # в тестах отключаем токены

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run pytest (with coverage)
        run: |
          pytest -q --maxfail=1 --disable-warnings \
                 --cov=./ --cov-report=xml --cov-report=term

      - name: Upload coverage XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Upload pytest reports (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-failure-artifacts
          path: |
            .pytest_cache
            **/logs/*.log
          if-no-files-found: ignore

  lint:
    name: Linters & static checks
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Ruff (lint)
        run: ruff check .

      - name: Black --check
        run: black --check .

      - name: Pylint
        run: |
          pylint app.py tools logger tests

      - name: mypy
        run: mypy .

  docker:
    name: Docker build & smoke test
    runs-on: ubuntu-latest
    needs: tests   # или needs: [tests, lint] — если хочешь блокировать сборку при линт-ошибках

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: docker build -t mp3-joiner:test .

      - name: Run container
        run: |
          docker run -d --rm -p 5001:5001 \
            -e SECRET_KEY=ci-secret \
            --name mp3joiner mp3-joiner:test

      - name: Wait for app & check health
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5001/healthz || true)
            if [ "$code" = "200" ]; then
              echo "healthy"; exit 0
            fi
            sleep 1
          done
          echo "App didn't become healthy"; docker logs mp3joiner; exit 1

      - name: Stop container
        if: always()
        run: docker stop mp3joiner
