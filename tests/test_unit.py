"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π tools.utils –∏ tools.merge_utils.
"""

import os
import zipfile
from io import BytesIO
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest
from werkzeug.datastructures import FileStorage

from tools.merge_utils import Merge
from tools.utils import create_zip, saving_files, merge_mp3_files_ffmpeg


@pytest.mark.parametrize(
    "input_name, expected_name",
    [
        ("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä.mp3", "–ø—Ä–∏–≤–µ—Ç_–º–∏—Ä.mp3"),
        ("—Ç–µ—Å—Ç/—Ñ–∞–π–ª.mp3", "—Ç–µ—Å—Ç—Ñ–∞–π–ª.mp3"),
        ("–¥–æ–∫—É–º–µ–Ω—Ç.pdf", "–¥–æ–∫—É–º–µ–Ω—Ç.pdf"),
        ("file/<test>.mp3", "filetest.mp3"),
        ('bad:"name"|*?.mp3', "badname.mp3"),
        ("remove/\\<>:?*\"'|@#$%^&+=`test.mp3", "removetest.mp3"),
        ("   spaces   .mp3", "spaces.mp3"),
        ("  leading and trailing  ", "leading_and_trailing"),
        ("multiple   spaces", "multiple_spaces"),
        ("smile üòÉ.mp3", "smile.mp3"),
        ("music üéµ.mp3", "music.mp3"),
        ("üî• hot track üî•.mp3", "hot_track.mp3"),
        ("", ""),
        ("....", ""),
        ("._._.", ""),
        ("-_-_-", "-_-_-"),
        ("a" * 255, "a" * 255),
    ],
)
def test_normalize_filename(input_name, expected_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤.

    :param input_name: –í—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    :param expected_name: –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
    """
    assert Merge.normalize_filename(input_name) == expected_name


def test_merge_strings():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    result = Merge.merge_strings(["a", "b", "c", "d"], count=2)
    assert result == ["a b", "c d"]

    result = Merge.merge_strings(["a", "b", "c", "d"], count=3)
    assert result == ["a b c", "d"]


def test_create_ffmpeg_input_file(tmpdir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è FFmpeg.

    :param tmpdir: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    """
    file_paths = [str(Path(tmpdir) / f"file{i}.mp3") for i in range(3)]
    input_file = str(Path(tmpdir) / "input.txt")

    result = Merge.create_ffmpeg_input_file(file_paths, input_file)

    assert result == input_file
    with open(input_file, encoding="utf-8") as f:
        lines = f.readlines()
    assert lines == [f"file '{path}'\n" for path in file_paths]


def test_saving_files(tmpdir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    :param tmpdir: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    """
    upload_folder = str(tmpdir.mkdir("uploads"))
    files = [
        FileStorage(BytesIO(b"fake audio data"), filename="   Test_—Ñ–∞–π–ª!.mp3"),
        FileStorage(BytesIO(b"another fake data"), filename="track 2.mp3"),
    ]
    saved_paths = saving_files(upload_folder, files)
    assert len(saved_paths) == 2
    assert os.path.basename(saved_paths[0]) == "Test_—Ñ–∞–π–ª.mp3"
    assert os.path.basename(saved_paths[1]) == "track_2.mp3"
    for path in saved_paths:
        assert os.path.exists(path)


def test_create_zip(tmpdir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞ –∏–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

    :param tmpdir: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    """
    merged_folder = tmpdir.mkdir("merged")
    file1 = merged_folder.join("file1.mp3")
    file2 = merged_folder.join("file2.mp3")
    file1.write("data1")
    file2.write("data2")

    archive_path = create_zip(str(merged_folder), [str(file1), str(file2)])

    assert os.path.exists(archive_path)
    with zipfile.ZipFile(archive_path, "r") as zipf:
        assert "file1.mp3" in zipf.namelist()
        assert "file2.mp3" in zipf.namelist()


@patch("tools.utils.subprocess.run")
@patch("tools.merge_utils.Merge.normalize_mp3_file_parallel")
@patch("tools.merge_utils.Merge.create_ffmpeg_input_file")
def test_merge_mp3_files_ffmpeg(mock_input, mock_norm, mock_run, tmpdir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è MP3 —á–µ—Ä–µ–∑ FFmpeg.

    :param mock_input: –ú–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ FFmpeg
    :param mock_norm: –º–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤,
    :param mock_run: –º–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã FFmpeg
    :param tmpdir: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    """
    mock_run.return_value = MagicMock(returncode=0, stdout=b"", stderr=b"")
    mock_norm.return_value = ["norm1.mp3", "norm2.mp3"]

    def fake_create_ffmpeg_input_file(files, input_file=None):
        path = os.path.join(str(tmpdir), "input.txt")
        with open(path, "w", encoding="utf-8") as f:
            f.write('file "norm.mp3"\n')
        return path

    mock_input.side_effect = fake_create_ffmpeg_input_file

    file1 = tmpdir.mkdir("upload").join("file1.mp3")
    file2 = tmpdir.mkdir("upload2").join("file2.mp3")
    file1.write("dummy")
    file2.write("dummy")
    merged_folder = tmpdir.mkdir("merged")
    result = merge_mp3_files_ffmpeg([str(file1), str(file2)], files_count=1, merged_folder=str(merged_folder))
    assert len(result) == 2
    assert mock_run.call_count == 2


@patch.object(Merge, "_normalize_mp3_file")
def test_normalize_mp3_file_parallel(mock_normalize, tmpdir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é MP3-—Ñ–∞–π–ª–æ–≤.

    :param mock_normalize: –ú–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    :param tmpdir: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    """
    mock_normalize.return_value = "normalized_file.mp3"

    file1 = tmpdir.join("file1.mp3")
    file1.write("dummy")

    result = Merge.normalize_mp3_file_parallel([str(file1)], merged_folder=str(tmpdir))
    assert result == ["normalized_file.mp3"]
